function solution(sizes) {
  let maxW = 0
  let maxH = 0
  for (let [w, h] of sizes) {
    if (w < h) {
      let temp = w
      w = h
      h = temp
    }
    if (maxW < w) maxW = w
    if (maxH < h) maxH = h
  }

  return maxW * maxH
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.06ms, 30.3MB)
// 테스트 2 〉	통과 (0.06ms, 30.3MB)
// 테스트 3 〉	통과 (0.12ms, 30.5MB)
// 테스트 4 〉	통과 (0.07ms, 30.4MB)
// 테스트 5 〉	통과 (0.10ms, 30.1MB)
// 테스트 6 〉	통과 (0.07ms, 30MB)
// 테스트 7 〉	통과 (0.14ms, 30.1MB)
// 테스트 8 〉	통과 (0.07ms, 30.2MB)
// 테스트 9 〉	통과 (0.08ms, 30.1MB)
// 테스트 10 〉	통과 (0.09ms, 30.3MB)
// 테스트 11 〉	통과 (0.12ms, 30.3MB)
// 테스트 12 〉	통과 (0.13ms, 30.4MB)
// 테스트 13 〉	통과 (0.31ms, 30.3MB)
// 테스트 14 〉	통과 (0.74ms, 30.7MB)
// 테스트 15 〉	통과 (0.75ms, 30.2MB)
// 테스트 16 〉	통과 (1.46ms, 30.4MB)
// 테스트 17 〉	통과 (4.60ms, 33.9MB)
// 테스트 18 〉	통과 (6.93ms, 34MB)
// 테스트 19 〉	통과 (5.46ms, 34.4MB)
// 테스트 20 〉	통과 (5.71ms, 34.4MB)

//직관적이지만 루프를 더 돌아야한다는 점에서 시간이 좀 걸린다.
function solution(sizes) {
  const SIZES = sizes.map((size) => [...size].sort((a, b) => a - b))

  const maxX = Math.max(...SIZES.map(([x, y]) => x))
  const maxY = Math.max(...SIZES.map(([x, y]) => y))

  return maxX * maxY
}
// 정확성  테스트
// 테스트 1 〉	통과 (0.16ms, 30.1MB)
// 테스트 2 〉	통과 (0.13ms, 30.2MB)
// 테스트 3 〉	통과 (0.10ms, 30.2MB)
// 테스트 4 〉	통과 (0.18ms, 30.2MB)
// 테스트 5 〉	통과 (0.14ms, 30MB)
// 테스트 6 〉	통과 (0.14ms, 30.1MB)
// 테스트 7 〉	통과 (0.12ms, 30MB)
// 테스트 8 〉	통과 (0.14ms, 30.2MB)
// 테스트 9 〉	통과 (0.12ms, 30.1MB)
// 테스트 10 〉	통과 (0.19ms, 29.9MB)
// 테스트 11 〉	통과 (0.25ms, 30.2MB)
// 테스트 12 〉	통과 (0.30ms, 29.9MB)
// 테스트 13 〉	통과 (1.05ms, 30.6MB)
// 테스트 14 〉	통과 (2.42ms, 31.5MB)
// 테스트 15 〉	통과 (4.02ms, 32.5MB)
// 테스트 16 〉	통과 (6.92ms, 34.9MB)
// 테스트 17 〉	통과 (9.21ms, 35.7MB)
// 테스트 18 〉	통과 (10.55ms, 37.8MB)
// 테스트 19 〉	통과 (9.82ms, 38.1MB)
// 테스트 20 〉	통과 (12.56ms, 40.3MB)

// 제일 좋은 코드인듯.
function solution(sizes) {
  const sortedSizes = sizes.map((size) => size.sort((a, b) => a - b))
  let X = 0
  let Y = 0

  for (const [x, y] of sortedSizes) {
    X = Math.max(x, X)
    Y = Math.max(y, Y)
  }

  return X * Y
}
// 정확성 테스트
// 테스트 1 〉 통과 (0.13ms, 30.1MB)
// 테스트 2 〉 통과 (0.09ms, 30.2MB)
// 테스트 3 〉 통과 (0.10ms, 29.9MB)
// 테스트 4 〉 통과 (0.30ms, 30.1MB)
// 테스트 5 〉 통과 (0.14ms, 30.1MB)
// 테스트 6 〉 통과 (0.27ms, 30.2MB)
// 테스트 7 〉 통과 (0.12ms, 30.1MB)
// 테스트 8 〉 통과 (0.10ms, 29.6MB)
// 테스트 9 〉 통과 (0.14ms, 30.2MB)
// 테스트 10 〉 통과 (0.18ms, 30.1MB)
// 테스트 11 〉 통과 (0.22ms, 30.2MB)
// 테스트 12 〉 통과 (0.26ms, 30.2MB)
// 테스트 13 〉 통과 (0.82ms, 30.7MB)
// 테스트 14 〉 통과 (2.01ms, 31MB)
// 테스트 15 〉 통과 (4.55ms, 32MB)
// 테스트 16 〉 통과 (4.93ms, 32.7MB)
// 테스트 17 〉 통과 (10.41ms, 36.2MB)
// 테스트 18 〉 통과 (13.05ms, 36.3MB)
// 테스트 19 〉 통과 (11.97ms, 38.6MB)
// 테스트 20 〉 통과 (17.23ms, 39.8MB)
