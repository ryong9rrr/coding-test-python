# 스택으로 풀기
def solution(k, m, score):
    score.sort()
    total = 0
    while len(score) >= m:
        count = m
        apples = []
        while count > 0:
            apples.append(score.pop())
            count -= 1
        total += min(apples) * m
    
    return total
"""
정확성  테스트
테스트 1 〉	통과 (0.03ms, 10.2MB)
테스트 2 〉	통과 (0.01ms, 10.3MB)
테스트 3 〉	통과 (0.02ms, 10.3MB)
테스트 4 〉	통과 (0.01ms, 10.2MB)
테스트 5 〉	통과 (0.02ms, 10.3MB)
테스트 6 〉	통과 (17.55ms, 10.8MB)
테스트 7 〉	통과 (17.17ms, 11MB)
테스트 8 〉	통과 (2.37ms, 10.2MB)
테스트 9 〉	통과 (16.15ms, 10.9MB)
테스트 10 〉	통과 (22.55ms, 10.6MB)
테스트 11 〉	통과 (234.27ms, 21.5MB)
테스트 12 〉	통과 (221.82ms, 21.6MB)
테스트 13 〉	통과 (217.18ms, 21.6MB)
테스트 14 〉	통과 (252.50ms, 21.6MB)
테스트 15 〉	통과 (216.83ms, 21.7MB)
테스트 16 〉	통과 (0.00ms, 10.2MB)
테스트 17 〉	통과 (0.01ms, 10.2MB)
테스트 18 〉	통과 (0.03ms, 10.1MB)
테스트 19 〉	통과 (0.02ms, 10.3MB)
테스트 20 〉	통과 (0.02ms, 10.1MB)
테스트 21 〉	통과 (0.01ms, 10.2MB)
테스트 22 〉	통과 (0.01ms, 10.1MB)
테스트 23 〉	통과 (0.01ms, 10.2MB)
테스트 24 〉	통과 (0.01ms, 10.3MB)
"""

# 그냥 인덱스에 접근해서 풀기
def solution(k, m, score):
    score.sort(reverse = True)
    total = 0
    for i in range(m - 1, len(score), m):
        total += score[i] * m
    
    return total
"""
정확성  테스트
테스트 1 〉	통과 (0.01ms, 10.3MB)
테스트 2 〉	통과 (0.01ms, 10.1MB)
테스트 3 〉	통과 (0.01ms, 10.3MB)
테스트 4 〉	통과 (0.01ms, 10.2MB)
테스트 5 〉	통과 (0.01ms, 10.2MB)
테스트 6 〉	통과 (5.46ms, 10.8MB)
테스트 7 〉	통과 (5.82ms, 10.9MB)
테스트 8 〉	통과 (0.78ms, 10.3MB)
테스트 9 〉	통과 (6.18ms, 11.1MB)
테스트 10 〉	통과 (4.36ms, 10.6MB)
테스트 11 〉	통과 (82.94ms, 21.6MB)
테스트 12 〉	통과 (103.85ms, 21.5MB)
테스트 13 〉	통과 (85.09ms, 21.6MB)
테스트 14 〉	통과 (74.56ms, 21.5MB)
테스트 15 〉	통과 (76.21ms, 21.6MB)
테스트 16 〉	통과 (0.00ms, 10.1MB)
테스트 17 〉	통과 (0.01ms, 10.2MB)
테스트 18 〉	통과 (0.01ms, 10.2MB)
테스트 19 〉	통과 (0.01ms, 10.2MB)
테스트 20 〉	통과 (0.01ms, 10.2MB)
테스트 21 〉	통과 (0.01ms, 10.2MB)
테스트 22 〉	통과 (0.00ms, 10MB)
테스트 23 〉	통과 (0.01ms, 10.2MB)
테스트 24 〉	통과 (0.01ms, 10.2MB)
"""