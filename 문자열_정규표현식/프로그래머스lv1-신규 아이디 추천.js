function solution(new_id) {
  //1. 모든 대문자를 소문자로 치환한다.
  //2. 알파벳 소문자, 숫자, -, _, .를 제외한 문자를 없앤다.
  //3. 마침표가 반복되면 하나의 마침표로 치환한다.
  //4. 처음이나 끝에 위치한 마침표는 없앤다.
  //5. 문자가 없다면 a를 대입한다.
  //6-1. 길이가 16자 이상이면 첫 15개의 문자만 남긴다.
  //6-2. 끝에 마침표가 위치하면 없앤다.
  new_id = new_id
    .toLowerCase()
    .replace(/[^a-z0-9\-_.]/g, '')
    .replace(/\.+/g, '.')
    .replace(/^\.|\.$/g, '')
    .replace(/^$/g, 'a')
    .slice(0, 15)
    .replace(/\.$/g, '')

  //7. 길이가 2자 이하라면 마지막 문자를 길이가 3이 될 때까지 반복한다.
  const newIdLength = new_id.length
  const lastStr = new_id[newIdLength - 1]

  if (newIdLength <= 2) {
    new_id += lastStr.repeat(3 - newIdLength)
  }

  return new_id
}
// 정확성 테스트
// 테스트 1 〉 통과 (0.33ms, 29.8MB)
// 테스트 2 〉 통과 (0.34ms, 30.2MB)
// 테스트 3 〉 통과 (0.20ms, 30.1MB)
// 테스트 4 〉 통과 (0.45ms, 30.1MB)
// 테스트 5 〉 통과 (0.27ms, 30.3MB)
// 테스트 6 〉 통과 (0.33ms, 30.3MB)
// 테스트 7 〉 통과 (0.22ms, 30.2MB)
// 테스트 8 〉 통과 (0.32ms, 30.3MB)
// 테스트 9 〉 통과 (0.44ms, 30.1MB)
// 테스트 10 〉 통과 (0.36ms, 30.2MB)
// 테스트 11 〉 통과 (0.34ms, 30.3MB)
// 테스트 12 〉 통과 (0.22ms, 30.3MB)
// 테스트 13 〉 통과 (0.33ms, 30MB)
// 테스트 14 〉 통과 (0.30ms, 30.2MB)
// 테스트 15 〉 통과 (0.33ms, 30.1MB)
// 테스트 16 〉 통과 (0.33ms, 30.1MB)
// 테스트 17 〉 통과 (0.33ms, 30.1MB)
// 테스트 18 〉 통과 (0.34ms, 30.4MB)
// 테스트 19 〉 통과 (0.36ms, 30.1MB)
// 테스트 20 〉 통과 (0.36ms, 30MB)
// 테스트 21 〉 통과 (0.23ms, 30MB)
// 테스트 22 〉 통과 (0.36ms, 30.2MB)
// 테스트 23 〉 통과 (0.33ms, 30.2MB)
// 테스트 24 〉 통과 (0.48ms, 29.9MB)
// 테스트 25 〉 통과 (0.23ms, 30MB)
// 테스트 26 〉 통과 (0.32ms, 29.9MB)
