//탑 - 바텀 재귀형식의 메모이제이션으로는 풀리지 않는 문제라고 한다.
function solution(n) {
  if (n <= 1) {
    return n;
  }

  const dp = Array.from({ length: n + 1 }, () => 0);
  dp[1] = 1;

  for (let i = 2; i < n + 1; i += 1) {
    dp[i] = (dp[i - 2] + dp[i - 1]) % 1234567;
  }

  return dp[n];
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.06ms, 33.4MB)
// 테스트 2 〉	통과 (0.06ms, 33.4MB)
// 테스트 3 〉	통과 (0.06ms, 33.6MB)
// 테스트 4 〉	통과 (0.06ms, 33.4MB)
// 테스트 5 〉	통과 (0.06ms, 33.5MB)
// 테스트 6 〉	통과 (0.06ms, 33.4MB)
// 테스트 7 〉	통과 (0.32ms, 33.4MB)
// 테스트 8 〉	통과 (0.26ms, 33.4MB)
// 테스트 9 〉	통과 (0.18ms, 33.4MB)
// 테스트 10 〉	통과 (0.34ms, 33.5MB)
// 테스트 11 〉	통과 (0.20ms, 33.6MB)
// 테스트 12 〉	통과 (0.22ms, 33.4MB)
// 테스트 13 〉	통과 (9.37ms, 37.2MB)
// 테스트 14 〉	통과 (9.21ms, 37.3MB)

// 메모리 절약, 최신 문법 지원이 안되서 스왑문법이 안먹힘
function solution(n) {
  let x = 0;
  let y = 1;

  for (let i = 0; i < n; i += 1) {
    let temp = (x + y) % 1234567;
    x = y;
    y = temp;
  }

  return x;
}
// 정확성  테스트
// 테스트 1 〉	통과 (0.03ms, 33.4MB)
// 테스트 2 〉	통과 (0.03ms, 33.5MB)
// 테스트 3 〉	통과 (0.03ms, 33.5MB)
// 테스트 4 〉	통과 (0.03ms, 33.5MB)
// 테스트 5 〉	통과 (0.03ms, 33.4MB)
// 테스트 6 〉	통과 (0.03ms, 33.5MB)
// 테스트 7 〉	통과 (0.07ms, 33.6MB)
// 테스트 8 〉	통과 (0.05ms, 33.5MB)
// 테스트 9 〉	통과 (0.06ms, 33.6MB)
// 테스트 10 〉	통과 (0.07ms, 33.7MB)
// 테스트 11 〉	통과 (0.04ms, 33.5MB)
// 테스트 12 〉	통과 (0.05ms, 33.4MB)
// 테스트 13 〉	통과 (1.58ms, 36.4MB)
// 테스트 14 〉	통과 (1.56ms, 36.4MB)
